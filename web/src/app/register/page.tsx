"use client";
import { useState } from "react";
import SiteFooter from "@/components/SiteFooter";

// ƒê√£ lo·∫°i b·ªè c√°c import th∆∞ vi·ªán b√™n ngo√†i ƒë·ªÉ tr√°nh l·ªói phi√™n b·∫£n.

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho form
type RegisterValues = {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
};

// Regex cho m·∫≠t kh·∫©u m·∫°nh
const STRONG_PASSWORD_REGEX = /^(?=.*\d)(?=.*[A-Z])(?=.*[!@#$%^&*])(?!.*\s).{6,}$/;

export default function RegisterPage() {
  const [serverMsg, setServerMsg] = useState<string | null>(null);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  
  // S·ª≠ d·ª•ng state ƒë·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu form
  const [formValues, setFormValues] = useState<RegisterValues>({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
  });

  // S·ª≠ d·ª•ng state ƒë·ªÉ qu·∫£n l√Ω l·ªói
  const [errors, setErrors] = useState<{ [key: string]: string; }>({});
  
  const [isSubmitting, setIsSubmitting] = useState(false);

  // H√†m x√°c th·ª±c th·ªß c√¥ng
  const validateForm = (values: RegisterValues) => {
    const newErrors: { [key: string]: string; } = {};
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
    if (!values.name) {
      newErrors.name = "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    }
    
    if (!values.email || !emailRegex.test(values.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá";
    }
    
    if (!values.password) {
      newErrors.password = "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±";
    } else if (!STRONG_PASSWORD_REGEX.test(values.password)) {
      newErrors.password = "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë, 1 ch·ªØ in hoa v√† 1 k√Ω t·ª± ƒë·∫∑c bi·ªát.";
    }

    if (values.password !== values.confirmPassword) {
      newErrors.confirmPassword = "Nh·∫≠p l·∫°i m·∫≠t kh·∫©u kh√¥ng kh·ªõp";
    }

    // Lu√¥n g·ªçi setErrors ƒë·ªÉ c·∫≠p nh·∫≠t state l·ªói sau khi t√≠nh to√°n xong
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };


  // X·ª≠ l√Ω thay ƒë·ªïi input v√† c·∫≠p nh·∫≠t state
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormValues(prev => {
      const newValues = { ...prev, [name]: value };
      // G·ªçi validateForm ·ªü ƒë√¢y ƒë·ªÉ c·∫≠p nh·∫≠t l·ªói ngay khi ng∆∞·ªùi d√πng g√µ
      validateForm(newValues);
      return newValues;
    });
  };

  // FIX: Ch·ªâ ki·ªÉm tra state l·ªói hi·ªán t·∫°i, kh√¥ng g·ªçi h√†m validateForm t·∫°i ƒë√¢y
  const hasEmptyFields = !Object.values(formValues).every(v => v.length > 0);
  const hasValidationErrors = Object.keys(errors).length > 0;
  const isFormValid = !hasEmptyFields && !hasValidationErrors;


  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setServerMsg(null);
    
    // ƒê·∫£m b·∫£o validateForm ƒë∆∞·ª£c g·ªçi l·∫ßn cu·ªëi tr∆∞·ªõc khi submit
    if (!validateForm(formValues)) {
      return;
    }

    setIsSubmitting(true);
    const res = await fetch("/api/auth/register", { 
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(formValues),
    });

    if (!res.ok) {
      const data = await res.json();
      setServerMsg(data?.message ?? "ƒêƒÉng k√Ω th·∫•t b·∫°i");
    } else {
      setServerMsg("ƒêƒÉng k√Ω th√†nh c√¥ng (-> ƒê·∫øn ƒêƒÉng Nh·∫≠p thoai n√†o!)");
    }
    setIsSubmitting(false);
  }

  const togglePasswordVisibility = () => setShowPassword(prev => !prev);
  const toggleConfirmPasswordVisibility = () => setShowConfirmPassword(prev => !prev);

  return (
    <main className="min-h-screen flex items-center justify-center py-10 px-4 sm:px-6 lg:px-8 bg-gray-100">
      <div className="max-w-md w-full bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-2xl font-semibold text-center">ƒêƒÉng k√Ω</h1>
        <form onSubmit={onSubmit} className="mt-6 space-y-4">
          
          {/* H·ªå T√äN */}
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="name">H·ªç t√™n</label>
            <input
              className="mt-1 w-full border rounded-md h-10 px-3 focus:ring-blue-500 focus:border-blue-500"
              name="name"
              id="name"
              onChange={handleChange}
              value={formValues.name}
              disabled={isSubmitting}
              placeholder="Nguy·ªÖn VƒÉn AAA"
            />
            {errors.name && (
              <p id="name-error" className="mt-1 text-sm text-red-600">{errors.name}</p>
            )}
          </div>

          {/* EMAIL */}
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="email">Email</label>
            <input
              type="email"
              className="mt-1 w-full border rounded-md h-10 px-3 focus:ring-blue-500 focus:border-blue-500"
              name="email"
              id="email"
              onChange={handleChange}
              value={formValues.email}
              disabled={isSubmitting}
              placeholder="ban@example.com"
            />
            {errors.email && (
              <p id="email-error" className="mt-1 text-sm text-red-600">{errors.email}</p>
            )}
          </div>

          {/* M·∫¨T KH·∫®U */}
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="password">M·∫≠t kh·∫©u</label>
            <div className="relative mt-1">
              <input
                type={showPassword ? "text" : "password"} 
                className="w-full border rounded-md h-10 px-3 pr-10 focus:ring-blue-500 focus:border-blue-500"
                name="password"
                id="password"
                onChange={handleChange}
                value={formValues.password}
                disabled={isSubmitting}
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
              <button
                type="button"
                onClick={togglePasswordVisibility}
                className="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 hover:text-gray-700"
                aria-label={showPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
              >
                {showPassword ? "üîí" : "üîì"} 
              </button>
            </div>
            {errors.password && (
              <p id="password-error" className="mt-1 text-sm text-red-600">{errors.password}</p>
            )}
          </div>

          {/* NH·∫¨P L·∫†I M·∫¨T KH·∫®U */}
          <div>
            <label className="block text-sm font-medium text-gray-700" htmlFor="confirmPassword">Nh·∫≠p l·∫°i m·∫≠t kh·∫©u</label>
            <div className="relative mt-1">
              <input
                type={showConfirmPassword ? "text" : "password"} 
                className="w-full border rounded-md h-10 px-3 pr-10 focus:ring-blue-500 focus:border-blue-500"
                name="confirmPassword"
                id="confirmPassword"
                onChange={handleChange}
                value={formValues.confirmPassword}
                disabled={isSubmitting}
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
              <button
                type="button"
                onClick={toggleConfirmPasswordVisibility}
                className="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 hover:text-gray-700"
                aria-label={showConfirmPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
              >
                {showConfirmPassword ? "üîí" : "üîì"} 
              </button>
            </div>
            {errors.confirmPassword && (
              <p id="confirm-error" className="mt-1 text-sm text-red-600">{errors.confirmPassword}</p>
            )}
            {formValues.password && !errors.confirmPassword && (
              <p className="mt-1 text-xs text-gray-500">
                M·∫πo: T·ªëi thi·ªÉu 6 k√Ω t·ª±, c√≥ 1 s·ªë, 1 ch·ªØ in hoa, 1 k√Ω t·ª± ƒë·∫∑c bi·ªát.
              </p>
            )}
          </div>
          
          {/* N√öT SUBMIT */}
          <button
            type="submit"
            disabled={isSubmitting || !isFormValid}
            className="w-full h-10 px-4 rounded-md bg-black text-white font-medium hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black disabled:opacity-50 transition"
          >
            {isSubmitting ? "ƒêang ƒëƒÉng k√Ω..." : "ƒêƒÉng k√Ω"}
          </button>

          {serverMsg && (
            <p className={`text-sm mt-2 text-center ${serverMsg.includes("th√†nh c√¥ng") ? "text-green-600" : "text-red-600"}`}>
              {serverMsg}
            </p>
          )}
        </form>
        <SiteFooter />
      </div>
    </main>
  );
}